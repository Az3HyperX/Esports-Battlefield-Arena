import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:esports_battlefield_arena/services/firebase/firestore/firestore.dart';
import 'package:esports_battlefield_arena/services/firebase/firestore_config.dart';
import 'package:esports_battlefield_arena/services/firebase/firestore_utils.dart';
import 'package:esports_battlefield_arena/app/failures.dart';

class FirestoreService extends Firestore {
  final String addErrorMessage =
      'ERROR: There is an error occurred during add process';
  final String updateErrorMessage =
      'ERROR: There is an error occurred during update process';
  final String deleteErrorMessage =
      'ERROR: There is an error occurred during delete process';
  final String getErrorMessage =
      'ERROR: There is an error occurred during get process';
  final String getAllErrorMessage =
      'ERROR: There is an error occurred during getAll process';
  final _firebaseFirestore = FirebaseFirestore.instance;

  @override
  add(Map<String, dynamic> data, FirestoreCollections collection) async {
    try {
      //Get the collection name from the firestore configuration
      String collectionName = firestoreCollectionsName[collection]![
          FirestoreDeclration.collectionName]!;
      log('"DEBUG": collection name: $collectionName');

      //Check the data is the correct type based on the collection input by the user
      checkCollectionNameAndgetModelData(collection, data);
      log('"DEBUG": Data: $data');

      var userDocumentReference =
          await _firebaseFirestore.collection(collectionName).add(data);
      //since the id is auto generated by firebase,
      //we need to update the field of the newly
      //created document with the generated Id
      log("DEBUG: ${userDocumentReference.id}");

      _firebaseFirestore
          .collection(collectionName)
          .doc(userDocumentReference.id)
          .update({
        //The format of the code is like this:
        //Key : Value
        firestoreCollectionsName[collection]![FirestoreDeclration.id]!:
            userDocumentReference.id,
      });
    } on FirebaseException catch (e) {
      log(firestoreError(e.code).toString());
      throw firestoreError(e.code);
    } on ArgumentError catch (e) {
      Failure error = Failure("ARGUMENT_ERROR",
          message: "$addErrorMessage\nERROR MESSAGE: ${e.message}",
          location: "firestore_utils.dart");
      log(error.toString());
      throw error;
    } on Exception catch (e) {
      Failure error = Failure("UNKNOWN",
          message: "$addErrorMessage\nERROR MESSAGE: $e",
          location: "firestore_service.dart");
      log(error.toString());
      throw error;
    }
  }

  @override
  delete(String documentId, FirestoreCollections collection) async {
    try {
      //Get the collection name from the firestore configuration
      String collectionName = firestoreCollectionsName[collection]![
          FirestoreDeclration.collectionName]!;
      log('"DEBUG": collection name: $collectionName');

      await _firebaseFirestore
          .collection(collectionName)
          .doc(documentId)
          .delete();
    } on FirebaseException catch (e) {
      log(firestoreError(e.code).toString());
      throw firestoreError(e.code);
    } on ArgumentError catch (e) {
      Failure error = Failure("ARGUMENT_ERROR",
          message: "$deleteErrorMessage\nERROR MESSAGE: ${e.message}",
          location: "firestore_utils.dart");
      log(error.toString());
      throw error;
    } on Exception catch (e) {
      Failure error = Failure("UNKNOWN",
          message: "$deleteErrorMessage\nERROR MESSAGE: $e",
          location: "firestore_service.dart");
      log(error.toString());
      throw error;
    }
  }

  @override
  Future<dynamic> get(
      String documentId, FirestoreCollections collection) async {
    try {
      //Get the collection name from the firestore configuration
      String collectionName = firestoreCollectionsName[collection]![
          FirestoreDeclration.collectionName]!;
      log('"DEBUG": collection name: $collectionName');

      var doc = await _firebaseFirestore
          .collection(collectionName)
          .doc(documentId)
          .get();

      if (!doc.exists) {
        throw Failure.notFound;
      }
      log('"DEBUG": Data: ${doc.data()}');

      return checkCollectionNameAndgetModelData(collection, doc.data()!);
    } on FirebaseException catch (e) {
      log(firestoreError(e.code).toString());
      throw firestoreError(e.code);
    } on ArgumentError catch (e) {
      Failure error = Failure("ARGUMENT_ERROR",
          message: "$getErrorMessage\nERROR MESSAGE: ${e.message}",
          location: "firestore_utils.dart");
      log(error.toString());
      throw error;
    } on Exception catch (e) {
      Failure error = Failure("UNKNOWN",
          message: "$getErrorMessage\nERROR MESSAGE: $e",
          location: "firestore_service.dart");
      log(error.toString());
      throw error;
    }
  }

  @override
  Future<List<dynamic>> getAll(FirestoreCollections collection) async {
    try {
      //Get the collection name from the firestore configuration
      String collectionName = firestoreCollectionsName[collection]![
          FirestoreDeclration.collectionName]!;
      log('"DEBUG": collection name: $collectionName');

      List<dynamic> listData = [];
      QuerySnapshot querySnapshot =
          await _firebaseFirestore.collection(collectionName).get();
      for (var element in querySnapshot.docs) {
        listData.add(checkCollectionNameAndgetModelData(
            collection, element.data() as Map<String, dynamic>));
      }
      log('"DEBUG": Data: $listData');
      return listData;
    } on FirebaseException catch (e) {
      log(firestoreError(e.code).toString());
      throw firestoreError(e.code);
    } on ArgumentError catch (e) {
      Failure error = Failure("ARGUMENT_ERROR",
          message: "$getAllErrorMessage\nERROR MESSAGE: ${e.message}",
          location: "firestore_utils.dart");
      log(error.toString());
      throw error;
    } on Exception catch (e) {
      Failure error = Failure("UNKNOWN",
          message: "$getAllErrorMessage\nERROR MESSAGE: $e",
          location: "firestore_service.dart");
      log(error.toString());
      throw error;
    }
  }

  @override
  update(String documentId, Map<String, dynamic> data,
      FirestoreCollections collection) async {
    try {
      //Get the collection name from the firestore configuration
      String collectionName = firestoreCollectionsName[collection]![
          FirestoreDeclration.collectionName]!;
      log('"DEBUG": collection name: $collectionName');

      //override the data with the correct type
      checkCollectionNameAndgetModelData(collection, data);
      log('"DEBUG": Data: $data');

      await _firebaseFirestore
          .collection(collectionName)
          .doc(documentId)
          .update(data);
    } on FirebaseException catch (e) {
      log(firestoreError(e.code).toString());
      throw firestoreError(e.code);
    } on ArgumentError catch (e) {
      Failure error = Failure("ARGUMENT_ERROR",
          message: "$updateErrorMessage\nERROR MESSAGE: ${e.message}",
          location: "firestore_utils.dart");
      log(error.toString());
      throw error;
    } on Exception catch (e) {
      Failure error = Failure("UNKNOWN",
          message: "$updateErrorMessage\nERROR MESSAGE: $e",
          location: "firestore_service.dart");
      log(error.toString());
      throw error;
    }
  }
}
